# generated by ChatGPT 4.5 2025-06-08T10:29Z

using Printf

# Generic function to compute machine epsilon
machine_epsilon(::Type{T}) where T<:AbstractFloat = eps(T)

# Function to compute ULP distance between two values
ulp_distance(x::T, y::T) where T<:AbstractFloat = abs(x - y) / eps(T)

# Function to compute relative rounding error of an operation
function rounding_error(op, x::T, y::T) where T<:AbstractFloat
    exact_result = Float64(op(Float64(x), Float64(y)))
    computed_result = T(op(x, y))
    return abs(computed_result - exact_result) / abs(exact_result)
end

# Function to analyze catastrophic cancellation
function catastrophic_cancellation(x::T, y::T) where T<:AbstractFloat
    diff = abs(x - y)
    sum_abs = abs(x) + abs(y)
    if diff != 0
        cancellation_metric = abs(sum_abs / diff)
        return cancellation_metric
    else
        return Inf
    end
end

# Example usage and reporting function
function float_precision_analysis(::Type{T}) where T<:AbstractFloat
    println("Precision analysis for type $(T):")

    # Machine epsilon
    eps_val = machine_epsilon(T)
    println(@sprintf("Machine epsilon: %.16e", eps_val))

    # ULP distance example
    x = T(1.0)
    y = nextfloat(x)
    ulp_dist = ulp_distance(x, y)
    println(@sprintf("ULP distance between 1.0 and nextfloat(1.0): %.16e", ulp_dist))

    # Rounding error example for addition
    add_error = rounding_error(+, T(1e-8), T(1e8))
    println(@sprintf("Rounding error (addition 1e-8 + 1e8): %.16e", add_error))

    # Catastrophic cancellation example
    cancel_metric = catastrophic_cancellation(T(1e8 + 1), T(1e8))
    println(@sprintf("Catastrophic cancellation metric (1e8 + 1 - 1e8): %.16e", cancel_metric))
end

# Example invocation
float_precision_analysis(Float32)
float_precision_analysis(Float64)
