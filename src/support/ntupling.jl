ftuples(f::F, i) where F
    [((),)
    (f(1),)
    (f(1), f(2),)
    (f(1), f(2), f(3),)
    (f(1), f(2), f(3), f(4),)
    (f(1), f(2), f(3), f(4), f(5),)
    (f(1), f(2), f(3), f(4), f(5), f(6),)
    (f(1), f(2), f(3), f(4), f(5), f(6), f(7),)
    (f(1), f(2), f(3), f(4), f(5), f(6), f(7), f(8),)][i]
end

    5, 6, 7, 8),
    (9, 10, 11, 12, 13, 14, 15, 16),
    (17, 18, 19, 20, 21, 22, 23, 24),
    (25, 26, 27, 28, 29, 30, 31)
]



function ntupled(f::F, n::Int) where F
    t  = n === 0 ? () :
         n === 1 ? (f(1),) :
         n === 2 ? (f(1), f(2)) :
         n === 3 ? (f(1), f(2), f(3)) :
         n === 4 ? (f(1), f(2), f(3), f(4)) :
         n === 5 ? (f(1), f(2), f(3), f(4), f(5)) :
         n === 6 ? (f(1), f(2), f(3), f(4), f(5), f(6)) :
         n === 7 ? (f(1), f(2), f(3), f(4), f(5), f(6), f(7)) :
         n === 8 ? (f(1), f(2), f(3), f(4), f(5), f(6), f(7), f(8)) :
         n === 9 ? (f(1), f(2), f(3), f(4), f(5), f(6), f(7), f(8), f(9)) :
         n === 10 ? (f(1), f(2), f(3), f(4), f(5), f(6), f(7), f(8), f(9), f(10)) :
         n === 11 ? (f(1), f(2), f(3), f(4), f(5), f(6), f(7), f(8), f(9), f(10), f(11)) :
         n === 12 ? (f(1), f(2), f(3), f(4), f(5), f(6), f(7), f(8), f(9), f(10), f(11), f(12)) :
         n === 13 ? (f(1), f(2), f(3), f(4), f(5), f(6), f(7), f(8), f(9), f(10), f(11), f(12), f(13)) :
         n === 14 ? (f(1), f(2), f(3), f(4), f(5), f(6), f(7), f(8), f(9), f(10), f(11), f(12), f(13), f(14)) :
         n === 15 ? (f(1), f(2), f(3), f(4), f(5), f(6), f(7), f(8), f(9), f(10), f(11), f(12), f(13), f(14), f(15)) :
         n === 16 ? (f(1), f(2), f(3), f(4), f(5), f(6), f(7), f(8), f(9), f(10), f(11), f(12), f(13), f(14), f(15), f(16)) :
         n === 17 ? (f(1), f(2), f(3), f(4), f(5), f(6), f(7), f(8), f(9), f(10), f(11), f(12), f(13), f(14), f(15), f(16), f(17)) :
         n === 18 ? (f(1), f(2), f(3), f(4), f(5), f(6), f(7), f(8), f(9), f(10), f(11), f(12), f(13), f(14), f(15), f(16), f(17), f(18)) :
         n === 19 ? (f(1), f(2), f(3), f(4), f(5), f(6), f(7), f(8), f(9), f(10), f(11), f(12), f(13), f(14), f(15), f(16), f(17), f(18), f(19)) :
         n === 20 ? (f(1), f(2), f(3), f(4), f(5), f(6), f(7), f(8), f(9), f(10), f(11), f(12), f(13), f(14), f(15), f(16), f(17), f(18), f(19), f(20)) :
         n === 21 ? (f(1), f(2), f(3), f(4), f(5), f(6), f(7), f(8), f(9), f(10), f(11), f(12), f(13), f(14), f(15), f(16), f(17), f(18), f(19), f(20), f(21)) :
         n === 22 ? (f(1), f(2), f(3), f(4), f(5), f(6), f(7), f(8), f(9), f(10), f(11), f(12), f(13), f(14), f(15), f(16), f(17), f(18), f(19), f(20), f(21), f(22)) :
         n === 23 ? (f(1), f(2), f(3), f(4), f(5), f(6), f(7), f(8), f(9), f(10), f(11), f(12), f(13), f(14), f(15), f(16), f(17), f(18), f(19), f(20), f(21), f(22), f(23)) :
         n === 24 ? (f(1), f(2), f(3), f(4), f(5), f(6), f(7), f(8), f(9), f(10), f(11), f(12), f(13), f(14), f(15), f(16), f(17), f(18), f(19), f(20), f(21), f(22), f(23), f(24)) :
         n === 25 ? (f(1), f(2), f(3), f(4), f(5), f(6), f(7), f(8), f(9), f(10), f(11), f(12), f(13), f(14), f(15), f(16), f(17), f(18), f(19), f(20), f(21), f(22), f(23), f(24), f(25)) :
         n === 26 ? (f(1), f(2), f(3), f(4), f(5), f(6), f(7), f(8), f(9), f(10), f(11), f(12), f(13), f(14), f(15), f(16), f(17), f(18), f(19), f(20), f(21), f(22), f(23), f(24), f(25), f(26)) :
         n === 27 ? (f(1), f(2), f(3), f(4), f(5), f(6), f(7), f(8), f(9), f(10), f(11), f(12), f(13), f(14), f(15), f(16), f(17), f(18), f(19), f(20), f(21), f(22), f(23), f(24), f(25), f(26), f(27)) :
         n === 28 ? (f(1), f(2), f(3), f(4), f(5), f(6), f(7), f(8), f(9), f(10), f(11), f(12), f(13), f(14), f(15), f(16), f(17), f(18), f(19), f(20), f(21), f(22), f(23), f(24), f(25), f(26), f(27), f(28)) :
         n === 29 ? (f(1), f(2), f(3), f(4), f(5), f(6), f(7), f(8), f(9), f(10), f(11), f(12), f(13), f(14), f(15), f(16), f(17), f(18), f(19), f(20), f(21), f(22), f(23), f(24), f(25), f(26), f(27), f(28), f(29)) :
         n === 30 ? (f(1), f(2), f(3), f(4), f(5), f(6), f(7), f(8), f(9), f(10), f(11), f(12), f(13), f(14), f(15), f(16), f(17), f(18), f(19), f(20), f(21), f(22), f(23), f(24), f(25), f(26), f(27), f(28), f(29), f(30)) :
         n === 31 ? (f(1), f(2), f(3), f(4), f(5), f(6), f(7), f(8), f(9), f(10), f(11), f(12), f(13), f(14), f(15), f(16), f(17), f(18), f(19), f(20), f(21), f(22), f(23), f(24), f(25), f(26), f(27), f(28), f(29), f(30), f(31)) :
         n === 32 ? (f(1), f(2), f(3), f(4), f(5), f(6), f(7), f(8), f(9), f(10), f(11), f(12), f(13), f(14), f(15), f(16), f(17), f(18), f(19), f(20), f(21), f(22), f(23), f(24), f(25), f(26), f(27), f(28), f(29), f(30), f(31), f(32)) :
         _ntupling(f, n)
     return t
 end


function ntupl(f::F, n::Int) where F
   if n <= 16
   t  = n === 0 ? () :
        n === 1 ? (f(1),) :
        n === 2 ? (f(1), f(2)) :
        n === 3 ? (f(1), f(2), f(3)) :
        n === 4 ? (f(1), f(2), f(3), f(4)) :
        n === 5 ? (f(1), f(2), f(3), f(4), f(5)) :
        n === 6 ? (f(1), f(2), f(3), f(4), f(5), f(6)) :
        n === 7 ? (f(1), f(2), f(3), f(4), f(5), f(6), f(7)) :
        n === 8 ? (f(1), f(2), f(3), f(4), f(5), f(6), f(7), f(8)) :
        n === 9 ? (f(1), f(2), f(3), f(4), f(5), f(6), f(7), f(8), f(9)) :
        n === 10 ? (f(1), f(2), f(3), f(4), f(5), f(6), f(7), f(8), f(9), f(10)) :
        n === 11 ? (f(1), f(2), f(3), f(4), f(5), f(6), f(7), f(8), f(9), f(10), f(11)) :
        n === 12 ? (f(1), f(2), f(3), f(4), f(5), f(6), f(7), f(8), f(9), f(10), f(11), f(12)) :
        n === 13 ? (f(1), f(2), f(3), f(4), f(5), f(6), f(7), f(8), f(9), f(10), f(11), f(12), f(13)) :
        n === 14 ? (f(1), f(2), f(3), f(4), f(5), f(6), f(7), f(8), f(9), f(10), f(11), f(12), f(13), f(14)) :
        n === 15 ? (f(1), f(2), f(3), f(4), f(5), f(6), f(7), f(8), f(9), f(10), f(11), f(12), f(13), f(14), f(15)) :
        n === 16 ? (f(1), f(2), f(3), f(4), f(5), f(6), f(7), f(8), f(9), f(10), f(11), f(12), f(13), f(14), f(15), f(16)) :
        _ntupling(f, n)
        return t
   else
   t = n ===  16 ? (f(1), f(2), f(3), f(4), f(5), f(6), f(7), f(8), f(9), f(10), f(11), f(12), f(13), f(14), f(15), f(16)) :
        n === 17 ? (f(1), f(2), f(3), f(4), f(5), f(6), f(7), f(8), f(9), f(10), f(11), f(12), f(13), f(14), f(15), f(16), f(17)) :
        n === 18 ? (f(1), f(2), f(3), f(4), f(5), f(6), f(7), f(8), f(9), f(10), f(11), f(12), f(13), f(14), f(15), f(16), f(17), f(18)) :
        n === 19 ? (f(1), f(2), f(3), f(4), f(5), f(6), f(7), f(8), f(9), f(10), f(11), f(12), f(13), f(14), f(15), f(16), f(17), f(18), f(19)) :
        n === 20 ? (f(1), f(2), f(3), f(4), f(5), f(6), f(7), f(8), f(9), f(10), f(11), f(12), f(13), f(14), f(15), f(16), f(17), f(18), f(19), f(20)) :
        n === 21 ? (f(1), f(2), f(3), f(4), f(5), f(6), f(7), f(8), f(9), f(10), f(11), f(12), f(13), f(14), f(15), f(16), f(17), f(18), f(19), f(20), f(21)) :
        n === 22 ? (f(1), f(2), f(3), f(4), f(5), f(6), f(7), f(8), f(9), f(10), f(11), f(12), f(13), f(14), f(15), f(16), f(17), f(18), f(19), f(20), f(21), f(22)) :
        n === 23 ? (f(1), f(2), f(3), f(4), f(5), f(6), f(7), f(8), f(9), f(10), f(11), f(12), f(13), f(14), f(15), f(16), f(17), f(18), f(19), f(20), f(21), f(22), f(23)) :
        n === 24 ? (f(1), f(2), f(3), f(4), f(5), f(6), f(7), f(8), f(9), f(10), f(11), f(12), f(13), f(14), f(15), f(16), f(17), f(18), f(19), f(20), f(21), f(22), f(23), f(24)) :
        n === 25 ? (f(1), f(2), f(3), f(4), f(5), f(6), f(7), f(8), f(9), f(10), f(11), f(12), f(13), f(14), f(15), f(16), f(17), f(18), f(19), f(20), f(21), f(22), f(23), f(24), f(25)) :
        n === 26 ? (f(1), f(2), f(3), f(4), f(5), f(6), f(7), f(8), f(9), f(10), f(11), f(12), f(13), f(14), f(15), f(16), f(17), f(18), f(19), f(20), f(21), f(22), f(23), f(24), f(25), f(26)) :
        n === 27 ? (f(1), f(2), f(3), f(4), f(5), f(6), f(7), f(8), f(9), f(10), f(11), f(12), f(13), f(14), f(15), f(16), f(17), f(18), f(19), f(20), f(21), f(22), f(23), f(24), f(25), f(26), f(27)) :
        n === 28 ? (f(1), f(2), f(3), f(4), f(5), f(6), f(7), f(8), f(9), f(10), f(11), f(12), f(13), f(14), f(15), f(16), f(17), f(18), f(19), f(20), f(21), f(22), f(23), f(24), f(25), f(26), f(27), f(28)) :
        n === 29 ? (f(1), f(2), f(3), f(4), f(5), f(6), f(7), f(8), f(9), f(10), f(11), f(12), f(13), f(14), f(15), f(16), f(17), f(18), f(19), f(20), f(21), f(22), f(23), f(24), f(25), f(26), f(27), f(28), f(29)) :
        n === 30 ? (f(1), f(2), f(3), f(4), f(5), f(6), f(7), f(8), f(9), f(10), f(11), f(12), f(13), f(14), f(15), f(16), f(17), f(18), f(19), f(20), f(21), f(22), f(23), f(24), f(25), f(26), f(27), f(28), f(29), f(30)) :
        n === 31 ? (f(1), f(2), f(3), f(4), f(5), f(6), f(7), f(8), f(9), f(10), f(11), f(12), f(13), f(14), f(15), f(16), f(17), f(18), f(19), f(20), f(21), f(22), f(23), f(24), f(25), f(26), f(27), f(28), f(29), f(30), f(31)) :
        n === 32 ? (f(1), f(2), f(3), f(4), f(5), f(6), f(7), f(8), f(9), f(10), f(11), f(12), f(13), f(14), f(15), f(16), f(17), f(18), f(19), f(20), f(21), f(22), f(23), f(24), f(25), f(26), f(27), f(28), f(29), f(30), f(31), f(32)) :
        _ntupling(f, n)
        return t
   end
end


# `ntupling`, for constructing tuples of a given length

"""
    ntupling(f, n::Integer)

Create a tuple of length `n`, computing each element as `f(i)`,ntu
where `i` is the index of the element.

# Examples
```jldoctest
julia> ntupling(i -> 2*i, 4)
(2, 4, 6, 8)
```
"""
@inline function ntupling(f::F, n::Int) where F
    # marked inline since this benefits from constant propagation of `n`
    t = n == 0  ? () :
        n == 1  ? (f(1),) :
        n == 2  ? (f(1), f(2)) :
        n == 3  ? (f(1), f(2), f(3)) :
        n == 4  ? (f(1), f(2), f(3), f(4)) :
        n == 5  ? (f(1), f(2), f(3), f(4), f(5)) :
        n == 6  ? (f(1), f(2), f(3), f(4), f(5), f(6)) :
        n == 7  ? (f(1), f(2), f(3), f(4), f(5), f(6), f(7)) :
        n == 8  ? (f(1), f(2), f(3), f(4), f(5), f(6), f(7), f(8)) :
        n == 9  ? (f(1), f(2), f(3), f(4), f(5), f(6), f(7), f(8), f(9)) :
        n == 10 ? (f(1), f(2), f(3), f(4), f(5), f(6), f(7), f(8), f(9), f(10)) :
        n == 11 ? (f(1), f(2), f(3), f(4), f(5), f(6), f(7), f(8), f(9), f(10), f(11)) :
        n == 12 ? (f(1), f(2), f(3), f(4), f(5), f(6), f(7), f(8), f(9), f(10), f(11), f(12)) :
        n == 13 ? (f(1), f(2), f(3), f(4), f(5), f(6), f(7), f(8), f(9), f(10), f(11), f(12), f(13)) :
        n == 14 ? (f(1), f(2), f(3), f(4), f(5), f(6), f(7), f(8), f(9), f(10), f(11), f(12), f(13), f(14)) :
        n == 15 ? (f(1), f(2), f(3), f(4), f(5), f(6), f(7), f(8), f(9), f(10), f(11), f(12), f(13), f(14), f(15)) :
        n == 16 ? (f(1), f(2), f(3), f(4), f(5), f(6), f(7), f(8), f(9), f(10), f(11), f(12), f(13), f(14), f(15), f(16)) :
        _ntupling(f, n)
    return t
end
ntupling(f::F, n::Integer) where F = ntupling(f, convert(Int, n)::Int)

# `n` should always be an Int (#55790)
function _ntupling(f::F, n::Int) where F
    @noinline
    (n >= 0) || throw(ArgumentError(LazyString("tuple length should be ≥ 0, got ", n)))
    ([f(i) for i = 1:n]...,)
end

function ntuplingany(f, n)
    @noinline
    (n >= 0) || throw(ArgumentError(LazyString("tuple length should be ≥ 0, got ", n)))
    (Any[f(i) for i = 1:n]...,)
end

# inferable ntupling (enough for bootstrapping)
ntupling(f, ::Val{0}) = ()
ntupling(f, ::Val{1}) = (@inline; (f(1),))
ntupling(f, ::Val{2}) = (@inline; (f(1), f(2)))
ntupling(f, ::Val{3}) = (@inline; (f(1), f(2), f(3)))

"""
    ntupling(f, ::Val{N})

Create a tuple of length `N`, computing each element as `f(i)`,
where `i` is the index of the element. By taking a `Val(N)`
argument, it is possible that this version of ntupling may
generate more efficient code than the version taking the
length as an integer. But `ntupling(f, N)` is preferable to
`ntupling(f, Val(N))` in cases where `N` cannot be determined
at compile time.

# Examples
```jldoctest
julia> ntupling(i -> 2*i, Val(4))
(2, 4, 6, 8)
```
"""
@inline function ntupling(f::F, ::Val{N}) where {F,N}
    N::Int
    (N >= 0) || throw(ArgumentError(LazyString("tuple length should be ≥ 0, got ", N)))
    if @generated
        :(@ntupling $N i -> f(i))
    else
        Tuple(f(i) for i = 1:(N::Int))
    end
end
typeof(function ntupling end).name.max_methods = UInt8(5)

@inline function fill_to_length(t::Tuple, val, ::Val{_N}) where {_N}
    M = length(t)
    N = _N::Int
    M > N && throw(ArgumentError(LazyString("input tuple of length ", M, ", requested ", N)))
    if @generated
        quote
            (t..., $(fill(:val, (_N::Int) - length(t.parameters))...))
        end
    else
        (t..., fill(val, N-M)...)
    end
end


# Specialized extensions for NTuple
function reverse(t::NTuple{N}) where N
    ntupling(Val{N}()) do i
        t[end+1-i]
    end
end



function ftuples(f::F, i) where F
    [((),)
    (f(1),)
    (f(1), f(2),)
    (f(1), f(2), f(3),)
    (f(1), f(2), f(3), f(4),)
    (f(1), f(2), f(3), f(4), f(5),)
    (f(1), f(2), f(3), f(4), f(5), f(6),)
    (f(1), f(2), f(3), f(4), f(5), f(6), f(7),)
    (f(1), f(2), f(3), f(4), f(5), f(6), f(7), f(8),)][i]
end

