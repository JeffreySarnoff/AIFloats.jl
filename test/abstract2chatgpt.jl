# generated by ChatGPT 4.5 2025-06-08T09:58Z 
# using Julia and Julia Best Practices write test functions for "abstract2.jl"


using Test

# Define sample types for testing
struct MySignedFiniteFloat <: AbsSignedFiniteFloat{8,4} end
struct MyUnsignedExtendedFloat <: AbsUnsignedExtendedFloat{8,3} end

@testset verbose=true "AbstractAIFloat Tests" begin
    @test is_signed(MySignedFiniteFloat)
    @test !is_signed(MyUnsignedExtendedFloat)

    @test is_unsigned(MyUnsignedExtendedFloat)
    @test !is_unsigned(MySignedFiniteFloat)

    @test is_finite(MySignedFiniteFloat)
    @test !is_finite(MyUnsignedExtendedFloat)

    @test !is_extended(MySignedFiniteFloat)
    @test is_extended(MyUnsignedExtendedFloat)

    @test nBits(MySignedFiniteFloat) == 8
    @test nSigBits(MySignedFiniteFloat) == 4
    @test nFracBits(MySignedFiniteFloat) == 3

    @test nValues(MySignedFiniteFloat) == 256
    @test nNumericValues(MySignedFiniteFloat) == 255

    @test nInfs(MyUnsignedExtendedFloat) == 1
    @test nInfs(MySignedFiniteFloat) == 0

    @test nPosInfs(MyUnsignedExtendedFloat) == 1
    @test nNegInfs(MyUnsignedExtendedFloat) == 0

    @test expBias(MySignedFiniteFloat) == 8
    @test expBias(MyUnsignedExtendedFloat) == 32

    @test length(prenormal_magnitude_steps(MySignedFiniteFloat)) == 8

    normal_steps = normal_magnitude_steps(MySignedFiniteFloat)
    @test length(normal_steps) == 8

    stride = normal_exp_stride(MySignedFiniteFloat)
    @test stride == cld(nMagnitudes(MySignedFiniteFloat), nExpValues(MySignedFiniteFloat))

    extremal_exps = foundation_extremal_exps(MySignedFiniteFloat)
    @test extremal_exps == (-15, 15)

    exps = foundation_exps(MySignedFiniteFloat)
    @test length(exps) == 31

    exp_strides = exp_unbiased_magnitude_strides(MySignedFiniteFloat)
    @test length(exp_strides) >= nMagnitudes(MySignedFiniteFloat)

    magnitudes = foundation_magnitudes(MyUnsignedExtendedFloat)
    @test length(magnitudes) == nMagnitudes(MyUnsignedExtendedFloat)

    values = value_sequence(MySignedFiniteFloat)
    @test length(values) == nValues(MySignedFiniteFloat)
    @test isnan(values[nPrenormalMagnitudes(MySignedFiniteFloat) + 1]) # NaN check
end
